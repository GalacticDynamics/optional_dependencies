[build-system]
  build-backend = "hatchling.build"
  requires      = ["hatch-vcs", "hatchling"]


[project]
  authors = [
    { name = "GalacticDynamics Maintainers", email = "nstarman@users.noreply.github.com" },
  ]
  classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
  ]
  dependencies = [
    "packaging",
  ]
  description = "Construct Checks for Optional Dependencies"
  dynamic = ["version"]
  license.file = "LICENSE"
  name = "optional_dependencies"
  readme = "README.md"
  requires-python = ">=3.8"

  [project.optional-dependencies]
    test = [
      "pytest >=6",
      "pytest-cov >=3",
      "sybil",
    ]
    dev = ["dataclassish[test]"]

  [project.urls]
    "Bug Tracker" = "https://github.com/GalacticDynamics/optional_dependencies/issues"
    Changelog     = "https://github.com/GalacticDynamics/optional_dependencies/releases"
    Discussions   = "https://github.com/GalacticDynamics/optional_dependencies/discussions"
    Homepage      = "https://github.com/GalacticDynamics/optional_dependencies"


[tool.hatch]
  build.hooks.vcs.version-file = "src/optional_dependencies/_version.py"
  version.source               = "vcs"

  [tool.hatch.envs.default]
    features     = ["src", "test"]
    scripts.test = "pytest {args}"


[tool.pytest.ini_options]
  addopts        = ["--showlocals", "--strict-config", "--strict-markers", "-ra"]
  filterwarnings = ["error"]
  log_cli_level  = "INFO"
  minversion     = "6.0"
  testpaths      = ["src", "tests"]
  xfail_strict   = true


[tool.coverage]
  report.exclude_also = ['\.\.\.', 'if typing.TYPE_CHECKING:']
  run.source          = ["optional_dependencies"]

[tool.mypy]
  disallow_incomplete_defs = false
  disallow_untyped_defs = false
  enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
  exclude = [
    '(^|/)tests/',                      # tests
    '^conftest\.py$',                   # nox test configuration
  ]
  files = ["src"]
  python_version = "3.8"
  strict = true
  warn_unreachable = true
  warn_unused_configs = true

  [[tool.mypy.overrides]]
    disallow_incomplete_defs = true
    disallow_untyped_defs    = true
    module                   = "optional_dependencies.*"


[tool.ruff]
  src            = ["src"]
  target-version = "py38"

  [tool.ruff.lint]
    extend-select = ["ALL"]
    ignore = [
      "ANN101",  # Missing type annotation for self in method
      "COM812",
      "D203",    # 1 blank line required before class docstring
      "D213",    # Multi-line docstring summary should start at the second line
      "ISC001",  # Conflicts with formatter
      "PLR09",   # Too many <...>
      "PLR2004", # Magic value used in comparison
    ]

    [tool.ruff.lint.per-file-ignores]
      "noxfile.py" = ["T20"]
      "tests/**" = [
        "ANN",
        "D10",
        "S101", # Use of assert detected,
        "T20",
      ]

    [tool.ruff.lint.isort]
      combine-as-imports = true


[tool.pylint]
  ignore-paths = [".*/__init__.pyi", ".*/_version.py"]
  messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "missing-function-docstring",
    "missing-module-docstring",
    "wrong-import-position",
  ]
  py-version = "3.8"
  reports.output-format = "colorized"
  similarities.ignore-imports = "yes"
